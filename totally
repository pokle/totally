#!/usr/bin/env bash
#
# Totally is inspired by Leiningen, Heroku, and swimming pools

((ERRORS=0))
function error() {
	echo $@ >&2
	((ERRORS++))
}

function die() {
	error $@
	exit 1
}

function log() {
	# Log turned off by default
	# use --verbose to turn on logging
	:
}

function cmd_verbose() {
	function log() { echo $@ >&2; }
	set -x
	log increased verbosity
}

function usage() {
	cat <<-USAGE >&2
	usage: $0 COMMANDS
	
	Main commands:

	.	init	Initialise a new project named after the current directory
	.	deploy	Builds and restarts your app - this is your fast feed back loop

	Troubleshooting commands:

	.	log     Tails the console, as well as any additional log files specified

	Auxilliary commands:

	.	verbose Turn on some extra logging
	.	build   Builds a Docker image for your project

	.	# Coming soon:
	.	# stop    Stops your container - you don't lose data
	.	# start	Starts your container - starts a stopped container
	.	# remove  Removes your container (not your image)
	.	# restart Restarts the container ignoring errors with stopping

	USAGE
	exit 1
}

function cmd_init() {
	[ -f .totally ] && die "This directory has already been initialised. 'cat .totally' to see your project."

	local name=$(basename $PWD)
	echo NAME=\"$name\" > .totally
	echo Initialised new Totally project called $name
}

# Recurses up from the current directory all the way to the root
# directory looking for .totally files to source for configuration overrides
# Also sets LOCAL_ROOT - which should be the local project root
function configuration_walk() {
	if [ "/" != "$PWD" ]; then
		pushd .. >/dev/null
		configuration_walk
		popd >/dev/null
	fi
	
	[ -r $PWD/.totally ] && 
		log "Sourcing overrides from $PWD/.totally" && 
		source $PWD/.totally &&
		LOCAL_ROOT=$PWD # The last recursed $PWD should be the local project root
}

function validate_configuration() {
	[ -z "$DOCKER_SSH_HOST" ] && error "Missing docker host name env DOCKER_SSH_HOST"
	[ -z "$NAME" ] && error "Missing project name env NAME. Are you in a project? Have you run a totally init?" 
	
	(( ERRORS > 0 )) && 
		die "Add missing envs to a .totally file either in your home directory, or project directories."
}

function configure() {
	log Sourcing user defaults from ~/.totally
	source ~/.totally
	
	log Overriding with project overrides recursively till /
	configuration_walk $PWD

	if [ -z "$REMOTE_ROOT" ]; then REMOTE_ROOT=totally-build; fi

	validate_configuration
}

function sync_up() {
	ssh $DOCKER_SSH_HOST "mkdir -p '$REMOTE_ROOT'"
	rsync --archive --delete $LOCAL_ROOT/ $DOCKER_SSH_HOST:$REMOTE_ROOT/$NAME/
}

function build_image() {
	ssh $DOCKER_SSH_HOST "cd $REMOTE_ROOT/$NAME && echo building $NAME in \$HOSTNAME:\$PWD; docker build -t $NAME ."
}

function restart_container() {
	ssh $DOCKER_SSH_HOST <<-HERE
	echo "restarting $NAME"
	docker stop "$NAME"
	docker rm "$NAME"
	docker run --name "$NAME" -d $NAME
	HERE
}

function cmd_build() {
	configure
	echo building Docker image called $NAME on $DOCKER_SSH_HOST

	sync_up
	build_image
}

function cmd_deploy() {
	configure
	echo deploying $NAME \($LOCAL_ROOT\) to $DOCKER_SSH_HOST:$REMOTE_ROOT
	
	sync_up
	build_image
	restart_container
}


function command_loop() {
	if [ -z "$1" ]; then
		usage
	fi

	while true; do
		CMD=$1
		[ -z "$CMD" ] && exit 0
		shift

		if [ $( type -t cmd_$CMD ) = "function" ]; then
			cmd_$CMD
		else
			error Sorry, no such command $CMD
			usage
		fi
	done
}

command_loop $@