#!/usr/bin/env bash
#
# Totally is inspired by Leiningen, Heroku, and swimming pools, and licenced
# under the GPLv2.
#
#   Copyright (C) 2014 Tushar Pokle
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along
#   with this program; if not, write to the Free Software Foundation, Inc.,
#   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


((ERRORS=0))
function error() {
	echo $@ >&2
	((ERRORS++))
}

function die() {
	error $@
	exit 1
}

function log() {
	# Log turned off by default
	# use --verbose to turn on logging
	:
}

function cmd_verbose() {
	function log() { echo $@ >&2; }
	set -x
	log increased verbosity
}

function usage() {
	cat <<-USAGE  >&2 
	usage: $0 COMMANDS
	
	Main commands:
	-	init		Initialise a new project named after the current directory
	-	run 		Builds a Docker image for your app, and runs it
	-   tunnel      Tunnels all container ports to your laptop

	Troubleshooting commands:
	-	config 	 Show Totally configuration
	-	logs     Tails the console- Hit ^C to stop it
	-	restart  Restarts the container ignoring errors with stopping
	- 	inspect  Shows you information about your container
	- 	top 	 Shows running processes  

	Auxilliary commands:
	-	verbose Turn on some extra logging
	-	build   Builds a Docker image for your project


	USAGE
	exit 1
}

function cmd_init() {
	[ -f .totally ] && die "This directory has already been initialised. 'cat .totally' to see your project."

	local name=$(basename $PWD)
	cat > .totally <<-HERE
		NAME="$name"
		IMAGE="\$NAME:latest"
		CONTAINER="\$USER-\$NAME"
		TUNNEL_PORT=12000
	HERE
	echo Initialised new Totally project called $name
}

# Recurses up from the current directory all the way to the root
# directory looking for .totally files to source for configuration overrides
# Also sets LOCAL_ROOT - which should be the local project root
function configuration_walk() {
	if [ "/" != "$PWD" ]; then
		pushd .. >/dev/null
		configuration_walk
		popd >/dev/null
	fi
	
	[ -r $PWD/.totally ] && 
		log "Sourcing overrides from $PWD/.totally" && 
		source $PWD/.totally &&
		LOCAL_ROOT=$PWD # The last recursed $PWD should be the local project root
}

function validate() {
	[ -z "$DOCKER_SSH_HOST" ] && error "Missing docker host name env DOCKER_SSH_HOST"
	[ -z "$NAME" ] && error "Missing project name env: NAME" 
	[ -z "$IMAGE" ] && error "Missing Docker image env: IMAGE" 
	[ -z "$CONTAINER" ] && error "Missing Docker container name env: CONTAINER" 

	[ ! -f "$LOCAL_ROOT/Dockerfile" ] && error "Missing a Dockerfile at $LOCAL_ROOT. I wouldn't know how to run your app without it."

	(( ERRORS > 0 )) && 
		die "Add missing envs to a .totally file either in your home directory, or project directory."
}

function cmd_config() {
	cat <<-HERE
		# Project
		NAME=$NAME
		LOCAL_ROOT=$LOCAL_ROOT
		TUNNEL_PORT=$TUNNEL_PORT

		# Docker
		IMAGE=$IMAGE
		CONTAINER=$CONTAINER

		# Docker host
		DOCKER_SSH_HOST=$DOCKER_SSH_HOST
		REMOTE_ROOT=$REMOTE_ROOT
	HERE
}

function configure() {
	log Sourcing user defaults from ~/.totally
	source ~/.totally
	
	log Overriding with project overrides recursively till /
	configuration_walk $PWD

	# Defaults
	REMOTE_ROOT=${REMOTE_ROOT:-totally-build}
	TUNNEL_PORT=${TUNNEL_PORT:-20000}

	validate
}

function sync_up() {
	ssh $DOCKER_SSH_HOST "mkdir -p '$REMOTE_ROOT'"
	rsync --archive --delete $LOCAL_ROOT/ $DOCKER_SSH_HOST:$REMOTE_ROOT/$NAME/
}

function build_image() {
	ssh $DOCKER_SSH_HOST "cd $REMOTE_ROOT/$NAME && echo building $IMAGE in \$HOSTNAME:\$PWD; docker build -t $IMAGE ."
}

function restart_container() {
	ssh $DOCKER_SSH_HOST <<-HERE
		echo "restarting $CONTAINER"	
		set -x
		docker stop "$CONTAINER"
		docker rm "$CONTAINER"
		docker run --name "$CONTAINER" -d $IMAGE
		docker logs "$CONTAINER" &&
			echo --- Started. Run totally logs to watch the startup process ---
	HERE
}

function cmd_build() {
	echo building Docker image called $IMAGE on $DOCKER_SSH_HOST

	sync_up &&
	build_image
}

function cmd_run() {
	echo running $NAME \($LOCAL_ROOT\) to $DOCKER_SSH_HOST:$REMOTE_ROOT
	
	sync_up &&
	build_image &&
	restart_container
}

function cmd_logs() {
	ssh $DOCKER_SSH_HOST <<-HERE
		echo Tailing logs for $CONTAINER. Hit ^C to stop
		while true; do
			docker logs --follow $CONTAINER 
			echo
			echo -- restarting totally logs at $(date) ------ Hit ^C to stop -----------
			sleep 2
		done
	HERE
}

function cmd_inspect() { 
	ssh $DOCKER_SSH_HOST "docker inspect $CONTAINER"
}

function cmd_top() { 
	ssh $DOCKER_SSH_HOST "docker top $CONTAINER"
}

function cmd_man() { :; }

function cmd_tunnel() {
	local container_ip=$(ssh $DOCKER_SSH_HOST "docker inspect --format='{{.NetworkSettings.IPAddress}}' $CONTAINER")
	local container_ports=$(ssh $DOCKER_SSH_HOST "docker inspect --format='{{range \$p,\$c := .NetworkSettings.Ports}}{{\$p}},{{end}}' $CONTAINER | sed 's/\/tcp,/ /g'")
	local container_port
	local tunnels
	for container_port in $container_ports; do
		echo Tunneling from localhost:$TUNNEL_PORT to $container_ip:$container_port. Is it HTTP? http://localhost:$TUNNEL_PORT/
		tunnels="$tunnels -L $((TUNNEL_PORT++)):$container_ip:$container_port"
	done

	ssh $tunnels $DOCKER_SSH_HOST 'echo Press ^C to close tunnel; sleep 3600'
}

function command_loop() {
	if [ -z "$1" ]; then
		usage
	fi

	# init needs to run before configure
	if [ "init" = "$1" ]; then
		cmd_init
		shift
	fi

	configure

	for CMD in $@; do
		if [ "$( type -t cmd_$CMD )" = "function" ]; then
			cmd_$CMD || die "Oops! $CMD exited with $?"
		else
			error Sorry, no such command $CMD
			usage
		fi
	done
}

command_loop $@